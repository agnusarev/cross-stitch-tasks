"""init

Revision ID: b241ea6081ac
Revises:
Create Date: 2024-11-23 13:32:40.324639

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from cross_stitch_tasks.env_vars import DB_SCHEMA

# revision identifiers, used by Alembic.
revision: str = "b241ea6081ac"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "types_of_base",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False, comment="Идентификатор вида основы"),
        sa.Column("type_of_base", sa.VARCHAR(length=100), nullable=True, comment="Тип основы"),
        sa.Column("time_stamp", postgresql.TIMESTAMP(timezone=True), nullable=False, comment="Момент записи данных"),
        sa.PrimaryKeyConstraint("id"),
        schema=DB_SCHEMA,
    )
    op.create_table(
        "types_of_image",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False, comment="Идентификатор типа изображения"),
        sa.Column("type_of_base", sa.VARCHAR(length=100), nullable=True, comment="Тип изображения"),
        sa.Column("time_stamp", postgresql.TIMESTAMP(timezone=True), nullable=False, comment="Момент записи данных"),
        sa.PrimaryKeyConstraint("id"),
        schema=DB_SCHEMA,
    )
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False, comment="Идентификатор пользователя"),
        sa.Column("email", sa.VARCHAR(length=100), nullable=True, comment="Email пользователя"),
        sa.Column("time_stamp", postgresql.TIMESTAMP(timezone=True), nullable=False, comment="Момент записи данных"),
        sa.PrimaryKeyConstraint("id"),
        schema=DB_SCHEMA,
    )
    op.create_table(
        "processes",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False, comment="Идентификатор процесса"),
        sa.Column("length_in_cm", sa.INTEGER(), nullable=False, comment="Длина работы в сантиметрах"),
        sa.Column("width_in_cm", sa.INTEGER(), nullable=False, comment="Ширина работы в сантиметрах"),
        sa.Column("length_in_crosses", sa.INTEGER(), nullable=False, comment="Длина работы в крестиках"),
        sa.Column("width_in_crosses", sa.INTEGER(), nullable=False, comment="Ширина работы в крестиках"),
        sa.Column("number_of_crosses", sa.INTEGER(), nullable=False, comment="Количество только крестиков"),
        sa.Column("number_of_half_crosses", sa.INTEGER(), nullable=False, comment="Количество полукрестиков"),
        sa.Column("number_of_backstitch", sa.INTEGER(), nullable=False, comment="Количество бэкстича"),
        sa.Column("number_of_remaining_stitches", sa.INTEGER(), nullable=False, comment="Количество остальных стежков"),
        sa.Column("number_of_colors", sa.INTEGER(), nullable=False, comment="Количество цветов в работе"),
        sa.Column("number_of_blends", sa.INTEGER(), nullable=False, comment="Количество блендов в работе"),
        sa.Column("type_of_base_id", sa.INTEGER(), nullable=True, comment="Вид основы"),
        sa.Column("type_of_image_id", sa.INTEGER(), nullable=True, comment="Тип изображения"),
        sa.Column("user_id", sa.INTEGER(), nullable=True, comment="Пользователь"),
        sa.Column("time_stamp", postgresql.TIMESTAMP(timezone=True), nullable=False, comment="Момент записи данных"),
        sa.ForeignKeyConstraint(
            ["type_of_base_id"],
            [f"{DB_SCHEMA}.types_of_base.id"],
        ),
        sa.ForeignKeyConstraint(
            ["type_of_image_id"],
            [f"{DB_SCHEMA}.types_of_image.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            [f"{DB_SCHEMA}.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=DB_SCHEMA,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("processes", schema=DB_SCHEMA)
    op.drop_table("users", schema=DB_SCHEMA)
    op.drop_table("types_of_image", schema=DB_SCHEMA)
    op.drop_table("types_of_base", schema=DB_SCHEMA)
    # ### end Alembic commands ###
